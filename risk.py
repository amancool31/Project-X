import pandas as pd
import datetime
import pandas_datareader.data as web
import math
import pandas as pd
import numpy as np
import preprocessing

from pandas import Series, DataFrame
import yfinance as yf

company = "AAPL"

df = yf.download(company, start = '2016-01-01', end='2020-03-28')

close_px = df['Adj Close']
mavg = close_px.rolling(window=100).mean()

print(mavg)

import matplotlib.pyplot as plt
from matplotlib import style

import matplotlib as mpl
mpl.rc('figure', figsize=(8, 7))
mpl.__version__

# Adjusting the style of matplotlib
style.use('ggplot')


rets = close_px / close_px.shift(1) - 1
rets.plot(label='return')

plt.show()


dfcomp = yf.download(['AAPL', 'GE', 'GOOG', 'IBM', 'MSFT'],start = '2016-01-01', end='2020-03-28')['Adj Close']


retscomp = dfcomp.pct_change()

corr = retscomp.corr()


dfreg = df.loc[:,['Adj Close','Volume']]

a=df['High'] - df['Close']
# print(a)


dfreg['HL_PCT'] = a / df['Close'] * 100.0
print("yo --- yo ")

# print(dfreg['HL_PCT'])

# print(df['Close'])
# print(df['Open'])

b = df['Close'] - df['Open']

dfreg['PCT_change'] = b / df['Open'] * 100.0


from scipy.stats import norm

# data = yf.download("AAPL", start = '2012-01-01', end='2017-01-01')['Adj Close']


result=[]
#Define Variables
S = yf.download(company, start = '2016-01-01', end='2020-03-28')['Adj Close'][-1]#apple['Adj Close'][-1] #starting stock price (i.e. last available real stock price)
T = 25 #Number of trading days
days = (df.index[-1] - df.index[0]).days
cagr = ((((df['Adj Close'][-1]) / df['Adj Close'][1])) ** (365.0/days)) - 1
mu = cagr# 0.2309 #Return

df['Returns'] = df['Adj Close'].pct_change()
vol = df['Returns'].std()*math.sqrt(252)
# vol = #0.4259 #Volatility


#choose number of runs to simulate - I have chosen 10,000
for i in range(100):
    #create list of daily returns using random normal distribution
    daily_returns=np.random.normal(mu/T,vol/math.sqrt(T),T)+1
    
    #set starting price and create price series generated by above random daily returns
    price_list = [S]
    
    for x in daily_returns:
        price_list.append(price_list[-1]*x)

    #plot data from each individual run which we will plot at the end
    plt.plot(price_list)
    
    #append the ending value of each simulated run to the empty list we created at the beginning
    result.append(price_list[-1])

#show the plot of multiple price series created above
plt.show()

#create histogram of ending stock values for our mutliple simulations
plt.hist(result,bins=50)
plt.show()


#use numpy mean function to calculate the mean of the result
print(round(np.mean(result),2))
